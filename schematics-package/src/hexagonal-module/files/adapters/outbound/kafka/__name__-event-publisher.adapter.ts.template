import { Injectable, Logger } from '@nestjs/common';
import { KafkaService } from '@share/infrastructure/kafka/kafka.service';
import { 
  I<%= classify(moduleName) %>EventPublisher,
  <%= classify(moduleName) %>CreatedEvent,
  <%= classify(moduleName) %>UpdatedEvent,
  <%= classify(moduleName) %>DeletedEvent,
  <%= classify(moduleName) %>StatusChangedEvent,
  <%= classify(moduleName) %>CustomEvent
} from '../../../domain/ports/i-<%= dasherize(moduleName) %>-event-publisher.port';

/**
 * <%= classify(moduleName) %> Event Publisher Adapter (Outbound Kafka Producer)
 *
 * This adapter implements the event publisher port for Kafka.
 * It translates domain events into Kafka messages.
 *
 * Responsibilities:
 * - Publish domain events to Kafka topics
 * - Handle serialization and schema validation
 * - Manage producer configuration and error handling
 * - Ensure at-least-once delivery semantics
 *
 * Architecture Notes:
 * - Implements the I<%= classify(moduleName) %>EventPublisher port interface
 * - Depends on shared KafkaService for infrastructure concerns
 * - Domain layer knows nothing about Kafka - only the port interface
 * - Can be replaced with other message brokers (RabbitMQ, SNS, etc.)
 *
 * Event Topics:
 * - <%= dasherize(moduleName) %>.created
 * - <%= dasherize(moduleName) %>.updated
 * - <%= dasherize(moduleName) %>.deleted
 *
 * @see I<%= classify(moduleName) %>EventPublisher
 */
@Injectable()
export class <%= classify(moduleName) %>EventPublisherAdapter implements I<%= classify(moduleName) %>EventPublisher {
  private readonly logger = new Logger(<%= classify(moduleName) %>EventPublisherAdapter.name);
  private readonly topicPrefix = '<%= dasherize(moduleName) %>';

  constructor(private readonly kafkaService: KafkaService) {}

  async publishCreated(event: <%= classify(moduleName) %>CreatedEvent): Promise<void> {
    const topic = `${this.topicPrefix}.created`;
    
    try {
      this.logger.log(`Publishing <%= classify(moduleName) %>CreatedEvent to topic: ${topic}`);

      await this.kafkaService.publishMessage({
        topic,
        key: event.data.id,
        value: JSON.stringify(event),
        headers: {
          'event-type': event.eventType,
          'event-version': event.version,
          'correlation-id': event.correlationId || event.eventId,
        },
      });

      this.logger.log(`Successfully published <%= classify(moduleName) %>CreatedEvent for ID: ${event.data.id}`);
    } catch (error) {
      this.logger.error(
        `Failed to publish <%= classify(moduleName) %>CreatedEvent for ID ${event.data.id}: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }

  async publishUpdated(event: <%= classify(moduleName) %>UpdatedEvent): Promise<void> {
    const topic = `${this.topicPrefix}.updated`;
    
    try {
      this.logger.log(`Publishing <%= classify(moduleName) %>UpdatedEvent to topic: ${topic}`);

      await this.kafkaService.publishMessage({
        topic,
        key: event.data.id,
        value: JSON.stringify(event),
        headers: {
          'event-type': event.eventType,
          'event-version': event.version,
          'correlation-id': event.correlationId || event.eventId,
        },
      });

      this.logger.log(`Successfully published <%= classify(moduleName) %>UpdatedEvent for ID: ${event.data.id}`);
    } catch (error) {
      this.logger.error(
        `Failed to publish <%= classify(moduleName) %>UpdatedEvent for ID ${event.data.id}: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }

  async publishDeleted(event: <%= classify(moduleName) %>DeletedEvent): Promise<void> {
    const topic = `${this.topicPrefix}.deleted`;
    
    try {
      this.logger.log(`Publishing <%= classify(moduleName) %>DeletedEvent to topic: ${topic}`);

      await this.kafkaService.publishMessage({
        topic,
        key: event.data.id,
        value: JSON.stringify(event),
        headers: {
          'event-type': event.eventType,
          'event-version': event.version,
          'correlation-id': event.correlationId || event.eventId,
        },
      });

      this.logger.log(`Successfully published <%= classify(moduleName) %>DeletedEvent for ID: ${event.data.id}`);
    } catch (error) {
      this.logger.error(
        `Failed to publish <%= classify(moduleName) %>DeletedEvent for ID ${event.data.id}: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }

  async publishStatusChanged(event: <%= classify(moduleName) %>StatusChangedEvent): Promise<void> {
    const topic = `${this.topicPrefix}.status-changed`;
    
    try {
      this.logger.log(`Publishing <%= classify(moduleName) %>StatusChangedEvent to topic: ${topic}`);

      await this.kafkaService.publishMessage({
        topic,
        key: event.data.id,
        value: JSON.stringify(event),
        headers: {
          'event-type': event.eventType,
          'event-version': event.version,
          'correlation-id': event.correlationId || event.eventId,
        },
      });

      this.logger.log(`Successfully published <%= classify(moduleName) %>StatusChangedEvent for ID: ${event.data.id}`);
    } catch (error) {
      this.logger.error(
        `Failed to publish <%= classify(moduleName) %>StatusChangedEvent for ID ${event.data.id}: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }

  async publishCustomEvent(event: <%= classify(moduleName) %>CustomEvent): Promise<void> {
    const topic = `${this.topicPrefix}.custom`;
    
    try {
      this.logger.log(`Publishing <%= classify(moduleName) %>CustomEvent to topic: ${topic}`);

      await this.kafkaService.publishMessage({
        topic,
        key: event.data.id || event.eventId,
        value: JSON.stringify(event),
        headers: {
          'event-type': event.eventType,
          'event-version': event.version,
          'correlation-id': event.correlationId || event.eventId,
        },
      });

      this.logger.log(`Successfully published <%= classify(moduleName) %>CustomEvent`);
    } catch (error) {
      this.logger.error(
        `Failed to publish <%= classify(moduleName) %>CustomEvent: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }
}
