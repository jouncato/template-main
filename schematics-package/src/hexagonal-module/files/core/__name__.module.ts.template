import { Module } from '@nestjs/common';
<% if (database === 'oracle') { %>import { OracleModule } from '@share/infrastructure/oracle/oracle.module';<% } %>
<% if (database === 'mssql') { %>import { SqlModule } from '@share/infrastructure/mssql/sql.module';<% } %>
<% if (database === 'mongodb') { %>import { MongooseModule } from '@nestjs/mongoose';<% } %>
<% if (kafka !== 'none') { %>import { KafkaModule } from '@share/infrastructure/kafka/kafka.module';<% } %>

// Domain Services
<% if (database !== 'none') { %>import { <%= classify(moduleName) %>DomainService } from './domain/services/<%= dasherize(moduleName) %>-domain.service';<% } %>

// Application Layer - Use Cases
import { Create<%= classify(moduleName) %>UseCase } from './application/usecases/create-<%= dasherize(moduleName) %>.usecase';
import { Get<%= classify(moduleName) %>ByIdUseCase } from './application/usecases/get-<%= dasherize(moduleName) %>-by-id.usecase';
<% if (operations.includes('update')) { %>import { Update<%= classify(moduleName) %>UseCase } from './application/usecases/update-<%= dasherize(moduleName) %>.usecase';<% } %>
<% if (operations.includes('delete')) { %>import { Delete<%= classify(moduleName) %>UseCase } from './application/usecases/delete-<%= dasherize(moduleName) %>.usecase';<% } %>

// Adapters - Inbound
import { <%= classify(moduleName) %>Controller } from './adapters/inbound/http.controller';

// Adapters - Outbound (Ports Implementation)
<% if (database !== 'none') { %>import { <%= classify(moduleName) %>RepositoryAdapter } from './adapters/outbound/db/<%= dasherize(moduleName) %>-repository.adapter';<% } %>
<% if (kafka === 'producer' || kafka === 'both') { %>import { <%= classify(moduleName) %>EventPublisherAdapter } from './adapters/outbound/kafka/<%= dasherize(moduleName) %>-event-publisher.adapter';<% } %>
<% if (kafka === 'consumer' || kafka === 'both') { %>import { <%= classify(moduleName) %>EventConsumerAdapter } from './adapters/outbound/kafka/<%= dasherize(moduleName) %>-event-consumer.adapter';<% } %>

// Ports (Interfaces)
<% if (database !== 'none') { %>import { I<%= classify(moduleName) %>Repository } from './domain/ports/i-<%= dasherize(moduleName) %>-repository.port';<% } %>
<% if (kafka === 'producer' || kafka === 'both') { %>import { I<%= classify(moduleName) %>EventPublisher } from './domain/ports/i-<%= dasherize(moduleName) %>-event-publisher.port';<% } %>

/**
 * <%= classify(moduleName) %> Module - Hexagonal Architecture
 *
 * This module follows the Hexagonal Architecture (Ports & Adapters) pattern:
 * - Domain Layer: Pure business logic, entities, value objects
 * - Application Layer: Use cases orchestrating domain logic
 * - Adapters Layer: Inbound (HTTP, GraphQL) and Outbound (DB, Kafka, HTTP clients)
 *
 * Dependencies flow: Adapters -> Application -> Domain
 * No reverse dependencies allowed (enforced by DIP)
 *
 * Generated by @template/schematics
 */
@Module({
  imports: [
<% if (database === 'oracle') { %>    OracleModule,<% } %>
<% if (database === 'mssql') { %>    SqlModule,<% } %>
<% if (database === 'mongodb') { %>    MongooseModule.forFeature([/* Add your schemas here */]),<% } %>
<% if (kafka !== 'none') { %>    KafkaModule,<% } %>
  ],
  controllers: [
    <%= classify(moduleName) %>Controller,
  ],
  providers: [
    // Domain Services
<% if (database !== 'none') { %>    <%= classify(moduleName) %>DomainService,<% } %>

    // Use Cases
    Create<%= classify(moduleName) %>UseCase,
    Get<%= classify(moduleName) %>ByIdUseCase,
<% if (operations.includes('update')) { %>    Update<%= classify(moduleName) %>UseCase,<% } %>
<% if (operations.includes('delete')) { %>    Delete<%= classify(moduleName) %>UseCase,<% } %>

    // Adapters (bound to Ports via DI tokens)
<% if (database !== 'none') { %>    {
      provide: I<%= classify(moduleName) %>Repository,
      useClass: <%= classify(moduleName) %>RepositoryAdapter,
    },<% } %>
<% if (kafka === 'producer' || kafka === 'both') { %>    {
      provide: I<%= classify(moduleName) %>EventPublisher,
      useClass: <%= classify(moduleName) %>EventPublisherAdapter,
    },<% } %>
<% if (kafka === 'consumer' || kafka === 'both') { %>    <%= classify(moduleName) %>EventConsumerAdapter,<% } %>
  ],
  exports: [
    // Export use cases if other modules need them
    Create<%= classify(moduleName) %>UseCase,
    Get<%= classify(moduleName) %>ByIdUseCase,
<% if (operations.includes('update')) { %>    Update<%= classify(moduleName) %>UseCase,<% } %>
<% if (operations.includes('delete')) { %>    Delete<%= classify(moduleName) %>UseCase,<% } %>
  ],
})
export class <%= classify(moduleName) %>Module {}
