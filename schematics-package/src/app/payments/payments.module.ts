import { Module } from '@nestjs/common';
import { OracleModule } from '@share/infrastructure/oracle/oracle.module';


import { KafkaModule } from '@share/infrastructure/kafka/kafka.module';

// Domain Services
import { PaymentsDomainService } from './domain/services/payments-domain.service';

// Application Layer - Use Cases
import { CreatePaymentsUseCase } from './application/usecases/create-payments.usecase';
import { GetPaymentsByIdUseCase } from './application/usecases/get-payments-by-id.usecase';
import { UpdatePaymentsUseCase } from './application/usecases/update-payments.usecase';
import { DeletePaymentsUseCase } from './application/usecases/delete-payments.usecase';

// Adapters - Inbound
import { PaymentsController } from './adapters/inbound/http.controller';

// Adapters - Outbound (Ports Implementation)
import { PaymentsRepositoryAdapter } from './adapters/outbound/db/payments-repository.adapter';
import { PaymentsEventPublisherAdapter } from './adapters/outbound/kafka/payments-event-publisher.adapter';
import { PaymentsEventConsumerAdapter } from './adapters/outbound/kafka/payments-event-consumer.adapter';

// Ports (Interfaces)
import { IPaymentsRepository } from './domain/ports/i-payments-repository.port';
import { IPaymentsEventPublisher } from './domain/ports/i-payments-event-publisher.port';

/**
 * Payments Module - Hexagonal Architecture
 *
 * This module follows the Hexagonal Architecture (Ports & Adapters) pattern:
 * - Domain Layer: Pure business logic, entities, value objects
 * - Application Layer: Use cases orchestrating domain logic
 * - Adapters Layer: Inbound (HTTP, GraphQL) and Outbound (DB, Kafka, HTTP clients)
 *
 * Dependencies flow: Adapters -> Application -> Domain
 * No reverse dependencies allowed (enforced by DIP)
 *
 * Generated by @template/schematics
 */
@Module({
  imports: [
    OracleModule,


    KafkaModule,
  ],
  controllers: [
    PaymentsController,
  ],
  providers: [
    // Domain Services
    PaymentsDomainService,

    // Use Cases
    CreatePaymentsUseCase,
    GetPaymentsByIdUseCase,
    UpdatePaymentsUseCase,
    DeletePaymentsUseCase,

    // Adapters (bound to Ports via DI tokens)
    {
      provide: IPaymentsRepository,
      useClass: PaymentsRepositoryAdapter,
    },
    {
      provide: IPaymentsEventPublisher,
      useClass: PaymentsEventPublisherAdapter,
    },
    PaymentsEventConsumerAdapter,
  ],
  exports: [
    // Export use cases if other modules need them
    CreatePaymentsUseCase,
    GetPaymentsByIdUseCase,
    UpdatePaymentsUseCase,
    DeletePaymentsUseCase,
  ],
})
export class PaymentsModule {}
